# Lecture 2: Elementary algebras
# Plot functions.
x <- seq(0, 10, by = 0.01)
# Linear
y1 <- sapply(x, function(i) 2*i + 1)   # y = 2x + 1
plot(x, y1, type = 'l', col = 'purple')
# Quadratic
y2 <- sapply(x, function(i) 2*i^2 - 4*i + 1)  # y = 2x^2 - 4x + 1
plot(x, y2, type = 'l', col = 'purple')
# Polynomial function
y3 <- sapply(x, function(i) 2*i^4 - i^3 + 5*i - 5) # y = 2x^4 - x^3 + 5x - 5
plot(x, y3, type = 'l', col = 'purple')
# Power function
y4 <- sapply(x, function(i) 2*i^.5) # y = 2x^(.5)
plot(x, y4, type = 'l', col = 'purple')
# Plot all the functions
plot(x, y1, type = 'l', col = 'purple', lwd = 3, xlim = c(0, 10), ylim = c(-10, 50), xlab = 'x', ylab = 'y')
lines(x, y2, col = 'blue', lwd = 3)
lines(x, y3,  col = 'red', lwd = 3)
lines(x, y4,  col = 'black', lwd = 3)
legend('topright', legend=c("Linear", "Quadratic", "Polynomial", 'Power'),
col=c("purple", "blue", 'red', 'black'),
lwd = 3, cex = 0.8, ncol = 2, text.width = 1)
IP0 <- 80 # Initial storage
Qx0 <- 300 # Initial storage sold to consumers.
H <- 350 # Production
alpha <- 0.1 #***
Pmaxp <- 350 #***
beta <- 1 #***
Pmaxc <- 850#***
Qout <- 350
Imaxc <- 550 + 190 #**
func <- function(P, H){
# Supply-side equation.
# 1. IP is total producer side storage, or sum of grain held by storage firms before being sold.
#    This is determined once H is determined.
IP <- IP0 - Qx0 + H # Total stocks available
#    The maximum is the total storage available.
#    Other than that, the sold amount increases as price increases.
# 2. Quantity to be sold in the market.
Qx <- Qs
Qs <- ifelse(P <= Pmaxp, IP*(P/Pmaxp)^alpha, IP) # Amount of stocks sold
IC0 <- 0  # Initial storage saved by consumers, including the government.
# Demand side
#    Initial storage + Quantity bought from suppliers - Consumption.
#
# 3. This is the total consumer-side storage.
abs(Qd-Qs)
IC <- IC0 + Qx - Qout
Qd <- ifelse(P <= Imaxc, (Imaxc - IC)*(1-P/Pmaxc)^beta, 0)
}
func2 <- function(P, H){
# Supply-side equation.
# 1. IP is total producer side storage, or sum of grain held by storage firms before being sold.
#    This is determined once H is determined.
IP <- IP0 - Qx0 + H # Total stocks available
# 2. Quantity to be sold in the market.
#    The maximum is the total storage available.
#    Other than that, the sold amount increases as price increases.
Qs <- ifelse(P <= Pmaxp, IP*(P/Pmaxp)^alpha, IP) # Amount of stocks sold
Qx <- Qs
# Demand side
IC0 <- 0  # Initial storage saved by consumers, including the government.
# 3. This is the total consumer-side storage.
#    Initial storage + Quantity bought from suppliers - Consumption.
IC <- IC0 + Qx - Qout
#
Qd <- ifelse(P <= Imaxc, (Imaxc - IC)*(1-P/Pmaxc)^beta, 0)
list(Qx, IP, IC, IP + IC)
}
library(bbmle)
HList <- seq(400, 1000, by = 10)
dat <- data.frame(HList)
dat$Pout <- NA
test <- mle(func, start = list(P = 100, H = 1000), method = 'BFGS', fixed = list(H = 1000))
test@coef
for(i in c(1:nrow(dat))){
Hchoice <- HList[i]
dat$Pout[i] <- mle(func, start = list(P = 100, H = Hchoice), method = 'BFGS', fixed = list(H = Hchoice))@coef
}
dat$Qx <- func2(P = dat$Pout, H = dat$HList)[[1]]
dat$stock1 <- func2(P = dat$Pout, H = dat$HList)[[2]]
dat$stock2 <- func2(P = dat$Pout, H = dat$HList)[[3]]
dat$stock3 <- func2(P = dat$Pout, H = dat$HList)[[4]]
plot(dat$HList, dat$Qx,  type = 'l')
library(bbmle)
rm(list=ls())
# Production <- 20
{
BeginStocks <- 5
Pmax <- 5
Beta <- 0.5
alpha <- 1.5
DemandFunc <- function(p) -2*p + 30
ExcessSupplyFunc <- function(p) p + 2
SolveSys <- function(p){
ExcessSupply <- ExcessSupplyFunc(p)
Import <- ifelse(p <= Pmax, (demand - Production - BeginStocks + (Production + BeginStocks)*(1-p/Pmax)^alpha)/(1-Beta*(1-p/Pmax)^alpha),
0)
abs(Import - ExcessSupply)
}
# test
ProductionDat <- seq(5, 30, by = 0.5)
Price = NA,
EndingStock = NA,
Import = NA,
demand <- DemandFunc(p)
Out <- data.frame(Production = ProductionDat,
# test <- optim(par = c(3), fn = SolveSys, method = 'Brent', lower = 0, upper = 50)
demand - Production - BeginStocks)
EndingStocks <- ifelse(p <= Pmax, (Production + BeginStocks + Beta*Import)*(1-p/Pmax)^alpha,
Demand = NA)
for (i in seq_along(ProductionDat)){
Production = ProductionDat[i]
test <- optim(par = c(3), fn = SolveSys, method = 'Brent', lower = 0, upper = 50)
Out$Price[i] <- test$par
p <- test$par
Out$Demand[i] <- DemandFunc(p)
demand <- Out$Demand[i]
Out$Import[i] <- ifelse(p <= Pmax, (demand - Production - BeginStocks + (Production + BeginStocks)*(1-p/Pmax)^alpha)/(1-Beta*(1-p/Pmax)^alpha),
demand - Production - BeginStocks)
Import <- Out$Import[i]
Out$EndingStock[i] <- ifelse(p <= Pmax, (Production + BeginStocks + Beta*Import)*(1-p/Pmax)^alpha,
0)
}
}
plot(Out$Price, Out$Production, type = 'l', ylim = c(0, 40),
axes = T, xlab = 'Market price', ylab = 'Quantity', lwd = 1.5)
library(bbmle)
rm(list=ls())
# Production <- 20
{
BeginStocks <- 5
Pmax <- 5
Beta <- 0.5
alpha <- 1.5
DemandFunc <- function(p) -2*p + 30
ExcessSupplyFunc <- function(p) p + 2
SolveSys <- function(p){
demand <- DemandFunc(p)
ExcessSupply <- ExcessSupplyFunc(p)
Import <- ifelse(p <= Pmax, (demand - Production - BeginStocks + (Production + BeginStocks)*(1-p/Pmax)^alpha)/(1-Beta*(1-p/Pmax)^alpha),
demand - Production - BeginStocks)
EndingStocks <- ifelse(p <= Pmax, (Production + BeginStocks + Beta*Import)*(1-p/Pmax)^alpha,
0)
abs(Import - ExcessSupply)
}
# test <- optim(par = c(3), fn = SolveSys, method = 'Brent', lower = 0, upper = 50)
# test
ProductionDat <- seq(5, 30, by = 0.5)
Out <- data.frame(Production = ProductionDat,
Price = NA,
Import = NA,
EndingStock = NA,
Demand = NA)
for (i in seq_along(ProductionDat)){
Production = ProductionDat[i]
test <- optim(par = c(3), fn = SolveSys, method = 'Brent', lower = 0, upper = 50)
Out$Price[i] <- test$par
p <- test$par
Out$Demand[i] <- DemandFunc(p)
demand <- Out$Demand[i]
Out$Import[i] <- ifelse(p <= Pmax, (demand - Production - BeginStocks + (Production + BeginStocks)*(1-p/Pmax)^alpha)/(1-Beta*(1-p/Pmax)^alpha),
demand - Production - BeginStocks)
Import <- Out$Import[i]
Out$EndingStock[i] <- ifelse(p <= Pmax, (Production + BeginStocks + Beta*Import)*(1-p/Pmax)^alpha,
0)
}
}
library(ggplot2)
library(bbmle)
geom_line(aes(Price, Production))
ggplot(data = Out) +
geom_line(aes(Price, Production))
ggplot(data = Out) +
geom_line(aes(Price, Production))
ggplot(data = Out) +
geom_line(aes(Price, Production)) +
theme_bw()
ggplot(data = Out) +
geom_line(aes(Price, Production)) +
theme_classic()
ggplot(data = Out) +
geom_line(aes(Production, EndingStock)) +
geom_line(aes(Production, Import), col = 'red') +
geom_line(aes(Production, Consumption), col = 'blue') +
theme_classic()
ggplot(data = Out) +
geom_line(aes(Production, EndingStock)) +
geom_line(aes(Production, Import), col = 'red') +
geom_line(aes(Production, Demand), col = 'blue') +
theme_classic()
scale_x_continuous(limits = c(5, 30))
ggplot(data = Out) +
geom_line(aes(Production, EndingStock)) +
geom_line(aes(Production, Import), col = 'red') +
geom_line(aes(Production, Demand), col = 'blue') +
theme_classic() +
labs(x = 'Production', y = 'Stock carryover/ Imports/ Consumption') +
scale_x_continuous(limits = c(5, 30))
ggplot(data = Out) +
geom_line(aes(Production, EndingStock)) +
geom_line(aes(Production, Import), col = 'red') +
geom_line(aes(Production, Demand), col = 'blue') +
theme_classic() +
labs(x = 'Production', y = 'Stock carryover/ Imports/ Consumption') +
scale_x_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5))
Out <- Out %>%
gather(Variable, Value, 3:5)
library(dplyr)
Out <- Out %>%
gather(Variable, Value, 3:5)
library(tidyr)
Out <- Out %>%
gather(Variable, Value, 3:5)
ggplot(data = Out) +
geom_line(aes(Production, Value, col = Variable)) +
theme_classic() +
labs(x = 'Production', y = 'Stock carryover/ Imports/ Consumption') +
scale_x_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5))
ggplot(data = Out) +
geom_line(aes(Production, Value, col = Variable), size = 1.3) +
theme_classic() +
labs(x = 'Production', y = 'Stock carryover/ Imports/ Consumption') +
scale_x_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5))
ggplot(data = Out) +
geom_line(aes(Production, Value, col = Variable), size = 1.3) +
theme_classic() +
labs(x = 'Production', y = 'Stock carryover/ Imports/ Consumption') +
scale_x_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5))
sessionInfo()
scale_x_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5))
ggplot(data = Out) +
geom_line(aes(Production, Value, col = Variable), size = 1.3) +
theme_classic() +
labs(x = 'Production', y = 'Stock carryover/ Imports/ Consumption') +
scale_x_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5))
ggplot(data = Out) +
geom_line(aes(Production, Value, col = Variable), size = 1.2) +
theme_classic() +
labs(x = 'Production', y = 'Stock carryover/ Imports/ Consumption') +
scale_x_continuous(limits = c(5, 30), breaks = seq(5, 30, by = 5))
